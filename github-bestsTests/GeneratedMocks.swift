// MARK: - Mocks generated from file: github-bests/Scenes/List/RepositoryListInteractor.swift at 2019-08-06 13:35:29 +0000

//
//  RepositoryListInteractor.swift
//  github-bests
//
//  Created by Paulo Lourenço on 02/08/19.
//  Copyright (c) 2019 Paulo Lourenço. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import github_bests

import UIKit


 class MockRepositoryListBusinessLogic: RepositoryListBusinessLogic, Cuckoo.ProtocolMock {
    
     typealias MocksType = RepositoryListBusinessLogic
    
     typealias Stubbing = __StubbingProxy_RepositoryListBusinessLogic
     typealias Verification = __VerificationProxy_RepositoryListBusinessLogic

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: RepositoryListBusinessLogic?

     func enableDefaultImplementation(_ stub: RepositoryListBusinessLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     var repositoryList: [Repository] {
        get {
            return cuckoo_manager.getter("repositoryList",
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.repositoryList)
        }
        
        set {
            cuckoo_manager.setter("repositoryList",
                value: newValue,
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.repositoryList = newValue)
        }
        
    }
    

    

    
    
    
     func fetchRepositories(next: Bool, showLoading: Bool)  {
        
    return cuckoo_manager.call("fetchRepositories(next: Bool, showLoading: Bool)",
            parameters: (next, showLoading),
            escapingParameters: (next, showLoading),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.fetchRepositories(next: next, showLoading: showLoading))
        
    }
    
    
    
     func fetchMore(indexPath: IndexPath)  {
        
    return cuckoo_manager.call("fetchMore(indexPath: IndexPath)",
            parameters: (indexPath),
            escapingParameters: (indexPath),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.fetchMore(indexPath: indexPath))
        
    }
    

	 struct __StubbingProxy_RepositoryListBusinessLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var repositoryList: Cuckoo.ProtocolToBeStubbedProperty<MockRepositoryListBusinessLogic, [Repository]> {
	        return .init(manager: cuckoo_manager, name: "repositoryList")
	    }
	    
	    
	    func fetchRepositories<M1: Cuckoo.Matchable, M2: Cuckoo.Matchable>(next: M1, showLoading: M2) -> Cuckoo.ProtocolStubNoReturnFunction<(Bool, Bool)> where M1.MatchedType == Bool, M2.MatchedType == Bool {
	        let matchers: [Cuckoo.ParameterMatcher<(Bool, Bool)>] = [wrap(matchable: next) { $0.0 }, wrap(matchable: showLoading) { $0.1 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockRepositoryListBusinessLogic.self, method: "fetchRepositories(next: Bool, showLoading: Bool)", parameterMatchers: matchers))
	    }
	    
	    func fetchMore<M1: Cuckoo.Matchable>(indexPath: M1) -> Cuckoo.ProtocolStubNoReturnFunction<(IndexPath)> where M1.MatchedType == IndexPath {
	        let matchers: [Cuckoo.ParameterMatcher<(IndexPath)>] = [wrap(matchable: indexPath) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockRepositoryListBusinessLogic.self, method: "fetchMore(indexPath: IndexPath)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_RepositoryListBusinessLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var repositoryList: Cuckoo.VerifyProperty<[Repository]> {
	        return .init(manager: cuckoo_manager, name: "repositoryList", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func fetchRepositories<M1: Cuckoo.Matchable, M2: Cuckoo.Matchable>(next: M1, showLoading: M2) -> Cuckoo.__DoNotUse<(Bool, Bool), Void> where M1.MatchedType == Bool, M2.MatchedType == Bool {
	        let matchers: [Cuckoo.ParameterMatcher<(Bool, Bool)>] = [wrap(matchable: next) { $0.0 }, wrap(matchable: showLoading) { $0.1 }]
	        return cuckoo_manager.verify("fetchRepositories(next: Bool, showLoading: Bool)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func fetchMore<M1: Cuckoo.Matchable>(indexPath: M1) -> Cuckoo.__DoNotUse<(IndexPath), Void> where M1.MatchedType == IndexPath {
	        let matchers: [Cuckoo.ParameterMatcher<(IndexPath)>] = [wrap(matchable: indexPath) { $0 }]
	        return cuckoo_manager.verify("fetchMore(indexPath: IndexPath)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class RepositoryListBusinessLogicStub: RepositoryListBusinessLogic {
    
    
     var repositoryList: [Repository] {
        get {
            return DefaultValueRegistry.defaultValue(for: ([Repository]).self)
        }
        
        set { }
        
    }
    

    

    
     func fetchRepositories(next: Bool, showLoading: Bool)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func fetchMore(indexPath: IndexPath)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}



 class MockRepositoryListInteractor: RepositoryListInteractor, Cuckoo.ClassMock {
    
     typealias MocksType = RepositoryListInteractor
    
     typealias Stubbing = __StubbingProxy_RepositoryListInteractor
     typealias Verification = __VerificationProxy_RepositoryListInteractor

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: RepositoryListInteractor?

     func enableDefaultImplementation(_ stub: RepositoryListInteractor) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     override var presenter: RepositoryListPresentationLogic? {
        get {
            return cuckoo_manager.getter("presenter",
                superclassCall:
                    
                    super.presenter
                    ,
                defaultCall: __defaultImplStub!.presenter)
        }
        
        set {
            cuckoo_manager.setter("presenter",
                value: newValue,
                superclassCall:
                    
                    super.presenter = newValue
                    ,
                defaultCall: __defaultImplStub!.presenter = newValue)
        }
        
    }
    
    
    
     override var worker: RepositoryListWorker {
        get {
            return cuckoo_manager.getter("worker",
                superclassCall:
                    
                    super.worker
                    ,
                defaultCall: __defaultImplStub!.worker)
        }
        
        set {
            cuckoo_manager.setter("worker",
                value: newValue,
                superclassCall:
                    
                    super.worker = newValue
                    ,
                defaultCall: __defaultImplStub!.worker = newValue)
        }
        
    }
    
    
    
     override var repositoryList: [Repository] {
        get {
            return cuckoo_manager.getter("repositoryList",
                superclassCall:
                    
                    super.repositoryList
                    ,
                defaultCall: __defaultImplStub!.repositoryList)
        }
        
        set {
            cuckoo_manager.setter("repositoryList",
                value: newValue,
                superclassCall:
                    
                    super.repositoryList = newValue
                    ,
                defaultCall: __defaultImplStub!.repositoryList = newValue)
        }
        
    }
    

    

    
    
    
     override func fetchRepositories(next: Bool, showLoading: Bool)  {
        
    return cuckoo_manager.call("fetchRepositories(next: Bool, showLoading: Bool)",
            parameters: (next, showLoading),
            escapingParameters: (next, showLoading),
            superclassCall:
                
                super.fetchRepositories(next: next, showLoading: showLoading)
                ,
            defaultCall: __defaultImplStub!.fetchRepositories(next: next, showLoading: showLoading))
        
    }
    
    
    
     override func fetchMore(indexPath: IndexPath)  {
        
    return cuckoo_manager.call("fetchMore(indexPath: IndexPath)",
            parameters: (indexPath),
            escapingParameters: (indexPath),
            superclassCall:
                
                super.fetchMore(indexPath: indexPath)
                ,
            defaultCall: __defaultImplStub!.fetchMore(indexPath: indexPath))
        
    }
    

	 struct __StubbingProxy_RepositoryListInteractor: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var presenter: Cuckoo.ClassToBeStubbedOptionalProperty<MockRepositoryListInteractor, RepositoryListPresentationLogic> {
	        return .init(manager: cuckoo_manager, name: "presenter")
	    }
	    
	    
	    var worker: Cuckoo.ClassToBeStubbedProperty<MockRepositoryListInteractor, RepositoryListWorker> {
	        return .init(manager: cuckoo_manager, name: "worker")
	    }
	    
	    
	    var repositoryList: Cuckoo.ClassToBeStubbedProperty<MockRepositoryListInteractor, [Repository]> {
	        return .init(manager: cuckoo_manager, name: "repositoryList")
	    }
	    
	    
	    func fetchRepositories<M1: Cuckoo.Matchable, M2: Cuckoo.Matchable>(next: M1, showLoading: M2) -> Cuckoo.ClassStubNoReturnFunction<(Bool, Bool)> where M1.MatchedType == Bool, M2.MatchedType == Bool {
	        let matchers: [Cuckoo.ParameterMatcher<(Bool, Bool)>] = [wrap(matchable: next) { $0.0 }, wrap(matchable: showLoading) { $0.1 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockRepositoryListInteractor.self, method: "fetchRepositories(next: Bool, showLoading: Bool)", parameterMatchers: matchers))
	    }
	    
	    func fetchMore<M1: Cuckoo.Matchable>(indexPath: M1) -> Cuckoo.ClassStubNoReturnFunction<(IndexPath)> where M1.MatchedType == IndexPath {
	        let matchers: [Cuckoo.ParameterMatcher<(IndexPath)>] = [wrap(matchable: indexPath) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockRepositoryListInteractor.self, method: "fetchMore(indexPath: IndexPath)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_RepositoryListInteractor: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var presenter: Cuckoo.VerifyOptionalProperty<RepositoryListPresentationLogic> {
	        return .init(manager: cuckoo_manager, name: "presenter", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var worker: Cuckoo.VerifyProperty<RepositoryListWorker> {
	        return .init(manager: cuckoo_manager, name: "worker", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    
	    var repositoryList: Cuckoo.VerifyProperty<[Repository]> {
	        return .init(manager: cuckoo_manager, name: "repositoryList", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func fetchRepositories<M1: Cuckoo.Matchable, M2: Cuckoo.Matchable>(next: M1, showLoading: M2) -> Cuckoo.__DoNotUse<(Bool, Bool), Void> where M1.MatchedType == Bool, M2.MatchedType == Bool {
	        let matchers: [Cuckoo.ParameterMatcher<(Bool, Bool)>] = [wrap(matchable: next) { $0.0 }, wrap(matchable: showLoading) { $0.1 }]
	        return cuckoo_manager.verify("fetchRepositories(next: Bool, showLoading: Bool)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func fetchMore<M1: Cuckoo.Matchable>(indexPath: M1) -> Cuckoo.__DoNotUse<(IndexPath), Void> where M1.MatchedType == IndexPath {
	        let matchers: [Cuckoo.ParameterMatcher<(IndexPath)>] = [wrap(matchable: indexPath) { $0 }]
	        return cuckoo_manager.verify("fetchMore(indexPath: IndexPath)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class RepositoryListInteractorStub: RepositoryListInteractor {
    
    
     override var presenter: RepositoryListPresentationLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (RepositoryListPresentationLogic?).self)
        }
        
        set { }
        
    }
    
    
     override var worker: RepositoryListWorker {
        get {
            return DefaultValueRegistry.defaultValue(for: (RepositoryListWorker).self)
        }
        
        set { }
        
    }
    
    
     override var repositoryList: [Repository] {
        get {
            return DefaultValueRegistry.defaultValue(for: ([Repository]).self)
        }
        
        set { }
        
    }
    

    

    
     override func fetchRepositories(next: Bool, showLoading: Bool)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func fetchMore(indexPath: IndexPath)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}


// MARK: - Mocks generated from file: github-bests/Scenes/List/RepositoryListPresenter.swift at 2019-08-06 13:35:29 +0000

//
//  RepositoryListPresenter.swift
//  github-bests
//
//  Created by Paulo Lourenço on 02/08/19.
//  Copyright (c) 2019 Paulo Lourenço. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import github_bests

import UIKit


 class MockRepositoryListPresentationLogic: RepositoryListPresentationLogic, Cuckoo.ProtocolMock {
    
     typealias MocksType = RepositoryListPresentationLogic
    
     typealias Stubbing = __StubbingProxy_RepositoryListPresentationLogic
     typealias Verification = __VerificationProxy_RepositoryListPresentationLogic

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

    
    private var __defaultImplStub: RepositoryListPresentationLogic?

     func enableDefaultImplementation(_ stub: RepositoryListPresentationLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    

    

    
    
    
     func presentList()  {
        
    return cuckoo_manager.call("presentList()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.presentList())
        
    }
    
    
    
     func presentError(error: Error)  {
        
    return cuckoo_manager.call("presentError(error: Error)",
            parameters: (error),
            escapingParameters: (error),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.presentError(error: error))
        
    }
    
    
    
     func presentLoading(screen: Bool)  {
        
    return cuckoo_manager.call("presentLoading(screen: Bool)",
            parameters: (screen),
            escapingParameters: (screen),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.presentLoading(screen: screen))
        
    }
    
    
    
     func stopLoading(screen: Bool)  {
        
    return cuckoo_manager.call("stopLoading(screen: Bool)",
            parameters: (screen),
            escapingParameters: (screen),
            superclassCall:
                
                Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                ,
            defaultCall: __defaultImplStub!.stopLoading(screen: screen))
        
    }
    

	 struct __StubbingProxy_RepositoryListPresentationLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func presentList() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockRepositoryListPresentationLogic.self, method: "presentList()", parameterMatchers: matchers))
	    }
	    
	    func presentError<M1: Cuckoo.Matchable>(error: M1) -> Cuckoo.ProtocolStubNoReturnFunction<(Error)> where M1.MatchedType == Error {
	        let matchers: [Cuckoo.ParameterMatcher<(Error)>] = [wrap(matchable: error) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockRepositoryListPresentationLogic.self, method: "presentError(error: Error)", parameterMatchers: matchers))
	    }
	    
	    func presentLoading<M1: Cuckoo.Matchable>(screen: M1) -> Cuckoo.ProtocolStubNoReturnFunction<(Bool)> where M1.MatchedType == Bool {
	        let matchers: [Cuckoo.ParameterMatcher<(Bool)>] = [wrap(matchable: screen) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockRepositoryListPresentationLogic.self, method: "presentLoading(screen: Bool)", parameterMatchers: matchers))
	    }
	    
	    func stopLoading<M1: Cuckoo.Matchable>(screen: M1) -> Cuckoo.ProtocolStubNoReturnFunction<(Bool)> where M1.MatchedType == Bool {
	        let matchers: [Cuckoo.ParameterMatcher<(Bool)>] = [wrap(matchable: screen) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockRepositoryListPresentationLogic.self, method: "stopLoading(screen: Bool)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_RepositoryListPresentationLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func presentList() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentList()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentError<M1: Cuckoo.Matchable>(error: M1) -> Cuckoo.__DoNotUse<(Error), Void> where M1.MatchedType == Error {
	        let matchers: [Cuckoo.ParameterMatcher<(Error)>] = [wrap(matchable: error) { $0 }]
	        return cuckoo_manager.verify("presentError(error: Error)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentLoading<M1: Cuckoo.Matchable>(screen: M1) -> Cuckoo.__DoNotUse<(Bool), Void> where M1.MatchedType == Bool {
	        let matchers: [Cuckoo.ParameterMatcher<(Bool)>] = [wrap(matchable: screen) { $0 }]
	        return cuckoo_manager.verify("presentLoading(screen: Bool)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func stopLoading<M1: Cuckoo.Matchable>(screen: M1) -> Cuckoo.__DoNotUse<(Bool), Void> where M1.MatchedType == Bool {
	        let matchers: [Cuckoo.ParameterMatcher<(Bool)>] = [wrap(matchable: screen) { $0 }]
	        return cuckoo_manager.verify("stopLoading(screen: Bool)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class RepositoryListPresentationLogicStub: RepositoryListPresentationLogic {
    

    

    
     func presentList()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func presentError(error: Error)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func presentLoading(screen: Bool)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     func stopLoading(screen: Bool)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}



 class MockRepositoryListPresenter: RepositoryListPresenter, Cuckoo.ClassMock {
    
     typealias MocksType = RepositoryListPresenter
    
     typealias Stubbing = __StubbingProxy_RepositoryListPresenter
     typealias Verification = __VerificationProxy_RepositoryListPresenter

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: RepositoryListPresenter?

     func enableDefaultImplementation(_ stub: RepositoryListPresenter) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     override var viewController: RepositoryListDisplayLogic? {
        get {
            return cuckoo_manager.getter("viewController",
                superclassCall:
                    
                    super.viewController
                    ,
                defaultCall: __defaultImplStub!.viewController)
        }
        
        set {
            cuckoo_manager.setter("viewController",
                value: newValue,
                superclassCall:
                    
                    super.viewController = newValue
                    ,
                defaultCall: __defaultImplStub!.viewController = newValue)
        }
        
    }
    

    

    
    
    
     override func presentList()  {
        
    return cuckoo_manager.call("presentList()",
            parameters: (),
            escapingParameters: (),
            superclassCall:
                
                super.presentList()
                ,
            defaultCall: __defaultImplStub!.presentList())
        
    }
    
    
    
     override func presentError(error: Error)  {
        
    return cuckoo_manager.call("presentError(error: Error)",
            parameters: (error),
            escapingParameters: (error),
            superclassCall:
                
                super.presentError(error: error)
                ,
            defaultCall: __defaultImplStub!.presentError(error: error))
        
    }
    
    
    
     override func presentLoading(screen: Bool)  {
        
    return cuckoo_manager.call("presentLoading(screen: Bool)",
            parameters: (screen),
            escapingParameters: (screen),
            superclassCall:
                
                super.presentLoading(screen: screen)
                ,
            defaultCall: __defaultImplStub!.presentLoading(screen: screen))
        
    }
    
    
    
     override func stopLoading(screen: Bool)  {
        
    return cuckoo_manager.call("stopLoading(screen: Bool)",
            parameters: (screen),
            escapingParameters: (screen),
            superclassCall:
                
                super.stopLoading(screen: screen)
                ,
            defaultCall: __defaultImplStub!.stopLoading(screen: screen))
        
    }
    

	 struct __StubbingProxy_RepositoryListPresenter: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var viewController: Cuckoo.ClassToBeStubbedOptionalProperty<MockRepositoryListPresenter, RepositoryListDisplayLogic> {
	        return .init(manager: cuckoo_manager, name: "viewController")
	    }
	    
	    
	    func presentList() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockRepositoryListPresenter.self, method: "presentList()", parameterMatchers: matchers))
	    }
	    
	    func presentError<M1: Cuckoo.Matchable>(error: M1) -> Cuckoo.ClassStubNoReturnFunction<(Error)> where M1.MatchedType == Error {
	        let matchers: [Cuckoo.ParameterMatcher<(Error)>] = [wrap(matchable: error) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockRepositoryListPresenter.self, method: "presentError(error: Error)", parameterMatchers: matchers))
	    }
	    
	    func presentLoading<M1: Cuckoo.Matchable>(screen: M1) -> Cuckoo.ClassStubNoReturnFunction<(Bool)> where M1.MatchedType == Bool {
	        let matchers: [Cuckoo.ParameterMatcher<(Bool)>] = [wrap(matchable: screen) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockRepositoryListPresenter.self, method: "presentLoading(screen: Bool)", parameterMatchers: matchers))
	    }
	    
	    func stopLoading<M1: Cuckoo.Matchable>(screen: M1) -> Cuckoo.ClassStubNoReturnFunction<(Bool)> where M1.MatchedType == Bool {
	        let matchers: [Cuckoo.ParameterMatcher<(Bool)>] = [wrap(matchable: screen) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockRepositoryListPresenter.self, method: "stopLoading(screen: Bool)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_RepositoryListPresenter: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var viewController: Cuckoo.VerifyOptionalProperty<RepositoryListDisplayLogic> {
	        return .init(manager: cuckoo_manager, name: "viewController", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func presentList() -> Cuckoo.__DoNotUse<(), Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentList()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentError<M1: Cuckoo.Matchable>(error: M1) -> Cuckoo.__DoNotUse<(Error), Void> where M1.MatchedType == Error {
	        let matchers: [Cuckoo.ParameterMatcher<(Error)>] = [wrap(matchable: error) { $0 }]
	        return cuckoo_manager.verify("presentError(error: Error)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentLoading<M1: Cuckoo.Matchable>(screen: M1) -> Cuckoo.__DoNotUse<(Bool), Void> where M1.MatchedType == Bool {
	        let matchers: [Cuckoo.ParameterMatcher<(Bool)>] = [wrap(matchable: screen) { $0 }]
	        return cuckoo_manager.verify("presentLoading(screen: Bool)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func stopLoading<M1: Cuckoo.Matchable>(screen: M1) -> Cuckoo.__DoNotUse<(Bool), Void> where M1.MatchedType == Bool {
	        let matchers: [Cuckoo.ParameterMatcher<(Bool)>] = [wrap(matchable: screen) { $0 }]
	        return cuckoo_manager.verify("stopLoading(screen: Bool)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class RepositoryListPresenterStub: RepositoryListPresenter {
    
    
     override var viewController: RepositoryListDisplayLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (RepositoryListDisplayLogic?).self)
        }
        
        set { }
        
    }
    

    

    
     override func presentList()   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func presentError(error: Error)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func presentLoading(screen: Bool)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
     override func stopLoading(screen: Bool)   {
        return DefaultValueRegistry.defaultValue(for: (Void).self)
    }
    
}


// MARK: - Mocks generated from file: github-bests/Scenes/List/RepositoryListWorker.swift at 2019-08-06 13:35:29 +0000

//
//  RepositoryListWorker.swift
//  github-bests
//
//  Created by Paulo Lourenço on 02/08/19.
//  Copyright (c) 2019 Paulo Lourenço. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import github_bests

import PromiseKit


 class MockRepositoryListWorker: RepositoryListWorker, Cuckoo.ClassMock {
    
     typealias MocksType = RepositoryListWorker
    
     typealias Stubbing = __StubbingProxy_RepositoryListWorker
     typealias Verification = __VerificationProxy_RepositoryListWorker

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

    
    private var __defaultImplStub: RepositoryListWorker?

     func enableDefaultImplementation(_ stub: RepositoryListWorker) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }
    

    
    
    
     override var dataSource: SearchAPIDataSource {
        get {
            return cuckoo_manager.getter("dataSource",
                superclassCall:
                    
                    super.dataSource
                    ,
                defaultCall: __defaultImplStub!.dataSource)
        }
        
        set {
            cuckoo_manager.setter("dataSource",
                value: newValue,
                superclassCall:
                    
                    super.dataSource = newValue
                    ,
                defaultCall: __defaultImplStub!.dataSource = newValue)
        }
        
    }
    

    

    
    
    
     override func getRepositories(request: RepositoryList.Request) -> Promise<SearchResults<[Repository]>> {
        
    return cuckoo_manager.call("getRepositories(request: RepositoryList.Request) -> Promise<SearchResults<[Repository]>>",
            parameters: (request),
            escapingParameters: (request),
            superclassCall:
                
                super.getRepositories(request: request)
                ,
            defaultCall: __defaultImplStub!.getRepositories(request: request))
        
    }
    

	 struct __StubbingProxy_RepositoryListWorker: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    var dataSource: Cuckoo.ClassToBeStubbedProperty<MockRepositoryListWorker, SearchAPIDataSource> {
	        return .init(manager: cuckoo_manager, name: "dataSource")
	    }
	    
	    
	    func getRepositories<M1: Cuckoo.Matchable>(request: M1) -> Cuckoo.ClassStubFunction<(RepositoryList.Request), Promise<SearchResults<[Repository]>>> where M1.MatchedType == RepositoryList.Request {
	        let matchers: [Cuckoo.ParameterMatcher<(RepositoryList.Request)>] = [wrap(matchable: request) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockRepositoryListWorker.self, method: "getRepositories(request: RepositoryList.Request) -> Promise<SearchResults<[Repository]>>", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_RepositoryListWorker: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    
	    var dataSource: Cuckoo.VerifyProperty<SearchAPIDataSource> {
	        return .init(manager: cuckoo_manager, name: "dataSource", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func getRepositories<M1: Cuckoo.Matchable>(request: M1) -> Cuckoo.__DoNotUse<(RepositoryList.Request), Promise<SearchResults<[Repository]>>> where M1.MatchedType == RepositoryList.Request {
	        let matchers: [Cuckoo.ParameterMatcher<(RepositoryList.Request)>] = [wrap(matchable: request) { $0 }]
	        return cuckoo_manager.verify("getRepositories(request: RepositoryList.Request) -> Promise<SearchResults<[Repository]>>", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}
}

 class RepositoryListWorkerStub: RepositoryListWorker {
    
    
     override var dataSource: SearchAPIDataSource {
        get {
            return DefaultValueRegistry.defaultValue(for: (SearchAPIDataSource).self)
        }
        
        set { }
        
    }
    

    

    
     override func getRepositories(request: RepositoryList.Request) -> Promise<SearchResults<[Repository]>>  {
        return DefaultValueRegistry.defaultValue(for: (Promise<SearchResults<[Repository]>>).self)
    }
    
}

