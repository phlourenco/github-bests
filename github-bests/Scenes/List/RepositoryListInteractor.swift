//
//  RepositoryListInteractor.swift
//  github-bests
//
//  Created by Paulo Lourenço on 02/08/19.
//  Copyright (c) 2019 Paulo Lourenço. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RepositoryListBusinessLogic {
    func fetchRepositories(next: Bool)
    func fetchMore(indexPath: IndexPath)
    var repositoryList: [Repository] { get set }
}

class RepositoryListInteractor: RepositoryListBusinessLogic {
    
    // MARK: - Public properties
    
    var presenter: RepositoryListPresentationLogic?
    var worker: RepositoryListWorker
    var repositoryList: [Repository] = []
    
    // MARK: - Private properties
    
    private let itemsPerPage = 20
    
    // MARK: - Constructors
    
    init() {
        worker = RepositoryListWorker()
    }
    
    // MARK: - Public methods
    
    func fetchRepositories(next: Bool) {
        let page = next ? getNextPageNumber() : 1
    
        let isScreenLoading = !next
        presenter?.presentLoading(screen: isScreenLoading)
        
        let request = RepositoryList.Request(query: "language:swift", sort: "stars", page: page, itemsPerPage: itemsPerPage)
        worker.getRepositories(request: request)
        .done({ (results) in
            if !next {
                self.repositoryList.removeAll()
            }
            self.handleResults(results)
        })
        .catch(handleError)
        .finally {
            self.presenter?.stopLoading(screen: isScreenLoading)
        }
    }
    
    func fetchMore(indexPath: IndexPath) {
        if indexPath.row == repositoryList.count-1 {
            fetchRepositories(next: true)
        }
    }
    
    // MARK: - Private methods
    
    private func handleResults(_ results: SearchResults<[Repository]>) {
        repositoryList.append(contentsOf: results.items)
        presenter?.presentList()
    }
    
    private func handleError(_ error: Error) {
        presenter?.presentError(error: error)
    }
    
    private func getNextPageNumber() -> Int {
        return (repositoryList.count / itemsPerPage) + 1
    }
    
}
